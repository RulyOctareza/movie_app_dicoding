// Mocks generated by Mockito 5.4.6 from annotations
// in movie_app_dicoding/test/presentation/cubit/movie_list_cubit_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_app_dicoding/domain/entities/movie.dart' as _i2;
import 'package:movie_app_dicoding/domain/repositories/movie_repository.dart'
    as _i3;
import 'package:movie_app_dicoding/domain/usecases/movie_usecases.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovie_0 extends _i1.SmartFake implements _i2.Movie {
  _FakeMovie_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMovieRepository_1 extends _i1.SmartFake
    implements _i3.MovieRepository {
  _FakeMovieRepository_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i3.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Movie>> getNowPlayingMovies() =>
      (super.noSuchMethod(
            Invocation.method(#getNowPlayingMovies, []),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
          )
          as _i4.Future<List<_i2.Movie>>);

  @override
  _i4.Future<List<_i2.Movie>> getPopularMovies() =>
      (super.noSuchMethod(
            Invocation.method(#getPopularMovies, []),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
          )
          as _i4.Future<List<_i2.Movie>>);

  @override
  _i4.Future<List<_i2.Movie>> getTopRatedMovies() =>
      (super.noSuchMethod(
            Invocation.method(#getTopRatedMovies, []),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
          )
          as _i4.Future<List<_i2.Movie>>);

  @override
  _i4.Future<_i2.Movie> getMovieDetail(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getMovieDetail, [id]),
            returnValue: _i4.Future<_i2.Movie>.value(
              _FakeMovie_0(this, Invocation.method(#getMovieDetail, [id])),
            ),
          )
          as _i4.Future<_i2.Movie>);

  @override
  _i4.Future<List<_i2.Movie>> getMovieRecommendations(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getMovieRecommendations, [id]),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
          )
          as _i4.Future<List<_i2.Movie>>);

  @override
  _i4.Future<List<_i2.Movie>> searchMovies(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchMovies, [query]),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
          )
          as _i4.Future<List<_i2.Movie>>);

  @override
  _i4.Future<List<_i2.Movie>> getMovieWatchlist() =>
      (super.noSuchMethod(
            Invocation.method(#getMovieWatchlist, []),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
          )
          as _i4.Future<List<_i2.Movie>>);

  @override
  _i4.Future<void> addMovieToWatchlist(int? movieId) =>
      (super.noSuchMethod(
            Invocation.method(#addMovieToWatchlist, [movieId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> removeMovieFromWatchlist(int? movieId) =>
      (super.noSuchMethod(
            Invocation.method(#removeMovieFromWatchlist, [movieId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> isMovieAddedToWatchlist(int? movieId) =>
      (super.noSuchMethod(
            Invocation.method(#isMovieAddedToWatchlist, [movieId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [GetPopularMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopularMovies extends _i1.Mock implements _i5.GetPopularMovies {
  MockGetPopularMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.MovieRepository);

  @override
  _i4.Future<List<_i2.Movie>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
          )
          as _i4.Future<List<_i2.Movie>>);
}

/// A class which mocks [GetTopRatedMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTopRatedMovies extends _i1.Mock implements _i5.GetTopRatedMovies {
  MockGetTopRatedMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.MovieRepository);

  @override
  _i4.Future<List<_i2.Movie>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
          )
          as _i4.Future<List<_i2.Movie>>);
}

/// A class which mocks [GetNowPlayingMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNowPlayingMovies extends _i1.Mock
    implements _i5.GetNowPlayingMovies {
  MockGetNowPlayingMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.MovieRepository);

  @override
  _i4.Future<List<_i2.Movie>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
          )
          as _i4.Future<List<_i2.Movie>>);
}

/// A class which mocks [SearchMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchMovies extends _i1.Mock implements _i5.SearchMovies {
  MockSearchMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.MovieRepository);

  @override
  _i4.Future<List<_i2.Movie>> call(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#call, [query]),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
          )
          as _i4.Future<List<_i2.Movie>>);
}

/// A class which mocks [GetMovieDetail].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieDetail extends _i1.Mock implements _i5.GetMovieDetail {
  MockGetMovieDetail() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.MovieRepository);

  @override
  _i4.Future<_i2.Movie> call(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i4.Future<_i2.Movie>.value(
              _FakeMovie_0(this, Invocation.method(#call, [id])),
            ),
          )
          as _i4.Future<_i2.Movie>);
}

/// A class which mocks [GetMovieRecommendations].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieRecommendations extends _i1.Mock
    implements _i5.GetMovieRecommendations {
  MockGetMovieRecommendations() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.MovieRepository);

  @override
  _i4.Future<List<_i2.Movie>> call(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
          )
          as _i4.Future<List<_i2.Movie>>);
}

/// A class which mocks [GetMovieWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieWatchlist extends _i1.Mock implements _i5.GetMovieWatchlist {
  MockGetMovieWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.MovieRepository);

  @override
  _i4.Future<List<_i2.Movie>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<List<_i2.Movie>>.value(<_i2.Movie>[]),
          )
          as _i4.Future<List<_i2.Movie>>);
}

/// A class which mocks [AddMovieToWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddMovieToWatchlist extends _i1.Mock
    implements _i5.AddMovieToWatchlist {
  MockAddMovieToWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.MovieRepository);

  @override
  _i4.Future<void> call(int? movieId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [movieId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [RemoveMovieFromWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveMovieFromWatchlist extends _i1.Mock
    implements _i5.RemoveMovieFromWatchlist {
  MockRemoveMovieFromWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.MovieRepository);

  @override
  _i4.Future<void> call(int? movieId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [movieId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [IsMovieAddedToWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsMovieAddedToWatchlist extends _i1.Mock
    implements _i5.IsMovieAddedToWatchlist {
  MockIsMovieAddedToWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.MovieRepository);

  @override
  _i4.Future<bool> call(int? movieId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [movieId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}
